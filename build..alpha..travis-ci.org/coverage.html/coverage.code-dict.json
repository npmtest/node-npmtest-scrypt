{"/home/travis/build/npmtest/node-npmtest-scrypt/test.js":"/* istanbul instrument in package npmtest_scrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scrypt/lib.npmtest_scrypt.js":"/* istanbul instrument in package npmtest_scrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_scrypt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_scrypt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-scrypt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-scrypt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_scrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_scrypt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_scrypt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_scrypt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_scrypt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_scrypt.__dirname + '/lib.npmtest_scrypt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scrypt/node_modules/scrypt/index.js":"\"use strict\";\n\nvar scryptNative = require(\"./build/Release/scrypt\")\n  , Crypto = require(\"crypto\")\n  , Os = require(\"os\");\n\nvar checkNumberOfArguments = function(args, message, numberOfArguments) {\n  if (message === undefined) message = \"No arguments present\";\n  if (numberOfArguments === undefined) numberOfArguments = 1;\n\n  if (args.length < numberOfArguments) {\n    var error = new SyntaxError(message);\n    throw error;\n  }\n}\n\n//\n// Checks async arguments. Will throw error if callback does not exist and\n// promises are not available\n//\nvar checkAsyncArguments = function(args, callback_least_needed_pos, message) {\n  checkNumberOfArguments(args);\n\n  var callback_index = (function(){\n    for (var i=0; i < args.length; i++) {\n      if (typeof args[i] === \"function\") {\n        return i;\n      }\n    }\n  })();\n\n  if (callback_index === undefined) {\n    if (typeof Promise !== \"undefined\")\n      return undefined; // if promises are available, don't worry about call backs\n\n    var error = new SyntaxError(\"No callback function present, and Promises are not available\");\n    throw error;\n  }\n\n  if (callback_index < callback_least_needed_pos) {\n    var error = new SyntaxError(message);\n    throw error;\n  }\n\n  return callback_index;\n}\n\n//\n// Checks the scrypt parameters object\n//\nvar checkScryptParametersObject = function(params) {\n  var error = undefined;\n\n  if (typeof params !== \"object\") {\n    var error = new TypeError(\"Scrypt parameters type is incorrect: It must be a JSON object\");\n  }\n\n  if (!error && !params.hasOwnProperty(\"N\")) {\n    var error = new TypeError(\"Scrypt params object does not have 'N' property present\");\n  }\n\n  if (!error && params.N !== parseInt(params.N)) {\n    var error = new TypeError(\"Scrypt params object 'N' property is not an integer\");\n  }\n\n  if (!error && !params.hasOwnProperty(\"r\")) {\n    var error = new TypeError(\"Scrypt params object does not have 'r' property present\");\n  }\n\n  if (!error && params.r !== parseInt(params.r)) {\n    var error = new TypeError(\"Scrypt params object 'r' property is not an integer\");\n  }\n\n  if (!error && !params.hasOwnProperty(\"p\")) {\n    var error = new TypeError(\"Scrypt params object does not have 'p' property present\");\n  }\n\n  if (!error && params.p !== parseInt(params.p)) {\n    var error = new TypeError(\"Scrypt params object 'p' property is not an integer\");\n  }\n\n  if (error) {\n    error.propertyName = \"Scrypt parameters object\";\n    error.propertyValue = params;\n    throw error;\n  }\n}\n\nvar processParamsArguments = function(args) {\n  var error = undefined;\n\n  checkNumberOfArguments(args, \"At least one argument is needed - the maxtime\", 1);\n\n  // Set defaults (if necessary)\n  if (args[1] === undefined) args[1] = 0; //maxmem default to 0\n  if (args[2] === undefined) args[2] = 0.5; //max_memfrac default to 0.5\n\n  for(var i=0; i < Math.min(3, args.length); i++) {\n    var propertyName = (function() {\n      if (i === 0) return \"maxtime\";\n      if (i === 1) return \"maxmem\";\n      if (i === 2) return \"max_memfrac\";\n    })();\n\n    // All args must be of type number\n    if (!error && typeof args[i] !== \"number\") {\n      error = new TypeError(propertyName + \" must be a number\");\n    }\n\n    // Specific argument checks\n    if (!error) {\n      switch (i) {\n        case 0: //maxtime\n          if (args[0] <= 0) {\n            error = new RangeError(propertyName + \" must be greater than 0\");\n          }\n          break;\n\n        case 1: //maxmem\n          if (args[1] !== parseInt(args[1], 10)) {\n            error = new TypeError(propertyName + \" must be an integer\");\n          }\n\n          if (!error && args[1] < 0) {\n            error = new RangeError(propertyName + \" must be greater than or equal to 0\")\n          }\n          break;\n\n        case 2: //max_memfrac\n          if (args[2] < 0.0 || args[2] > 1.0) {\n            error = new RangeError(propertyName + \" must be between 0.0 and 1.0 inclusive\")\n          }\n          break;\n      }\n    }\n\n    // Throw error if necessary\n    if (error) {\n      error.propertyName = propertyName;\n      error.propertyValue = args[i];\n      throw error;\n    }\n  }\n\n  return args;\n}\n\nvar processKDFArguments = function(args) {\n  checkNumberOfArguments(args, \"At least two arguments are needed - the key and the Scrypt paramaters object\", 2)\n\n  //\n  // Check key argument\n  //\n  if (typeof args[0] === \"string\")\n    // Convert string to buffer (if necessary)\n    args[0] = new Buffer(args[0]);\n  else if (!Buffer.isBuffer(args[0])) {\n    var error = new TypeError(\"Key type is incorrect: It can only be of type string or Buffer\");\n    error.propertyName = \"key\";\n    error.propertyValue = args[0];\n    throw error;\n  }\n\n  //\n  // Check Scrypt Parameters object\n  //\n  checkScryptParametersObject(args[1])\n\n  return args;\n}\n\nvar processVerifyArguments = function(args) {\n  checkNumberOfArguments(args, \"At least two arguments are needed - the KDF and the key\", 2);\n\n  //\n  // Check KDF\n  //\n  if (typeof args[0] === \"string\")\n    // Convert string to buffer (if necessary)\n    args[0] = new Buffer(args[0]);\n  else if (!Buffer.isBuffer(args[0])) {\n    var error = new TypeError(\"KDF type is incorrect: It can only be of type string or Buffer\");\n    error.propertyName = \"KDF\";\n    error.propertyValue = args[0];\n    throw error;\n  }\n\n  //\n  // Check Key\n  //\n  if (typeof args[1] === \"string\")\n    // Convert string to buffer (if necessary)\n    args[1] = new Buffer(args[1]);\n  else if (!Buffer.isBuffer(args[1])) {\n    var error = new TypeError(\"Key type is incorrect: It can only be of type string or Buffer\");\n    error.propertyName = \"key\";\n    error.propertyValue = args[1];\n    throw error;\n  }\n\n  return args;\n}\n\nvar processHashArguments = function(args) {\n  checkNumberOfArguments(args, \"At least four arguments are needed - the key to hash, the scrypt params object, the output length of the hash and the salt\", 4);\n\n  //\n  // Check Key\n  //\n  if (typeof args[0] === \"string\")\n    // Convert string to buffer (if necessary)\n    args[0] = new Buffer(args[0]);\n  else if (!Buffer.isBuffer(args[0])) {\n    var error = new TypeError(\"Key type is incorrect: It can only be of type string or Buffer\");\n    error.propertyName = \"KDF\";\n    error.propertyValue = args[0];\n    throw error;\n  }\n\n  //\n  // Check Scrypt Parameters object\n  //\n  checkScryptParametersObject(args[1])\n\n  //\n  // Check the hash output length\n  //\n  if (typeof args[2] !== \"number\" || args[2] !== parseInt(args[2],10)) {\n    error = new TypeError(\"Hash length must be an integer\");\n    throw error;\n  }\n\n  //\n  // Check Salt\n  //\n  if (typeof args[3] === \"string\")\n    // Convert string to buffer (if necessary)\n    args[3] = new Buffer(args[3]);\n  else if (!Buffer.isBuffer(args[3])) {\n    var error = new TypeError(\"Salt type is incorrect: It can only be of type string or Buffer\");\n    error.propertyName = \"salt\";\n    error.propertyValue = args[3];\n    throw error;\n  }\n\n  return args;\n}\n\n//\n// Scrypt Object\n//\nvar scrypt = {\n  paramsSync: function() {\n    var args = processParamsArguments(arguments);\n    return scryptNative.paramsSync(args[0], args[1], args[2], Os.totalmem());\n  },\n\n  params: function() {\n    var args = arguments\n      , callback_index = checkAsyncArguments(args, 1, \"At least one argument is needed before the callback - the maxtime\");\n\n    if (callback_index === undefined) {\n      // Promise\n      return new Promise(function(resolve, reject) {\n        args = processParamsArguments(args);\n        scryptNative.params(args[0], args[1], args[2],  Os.totalmem(), function(err, params) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(params);\n          }\n        });\n      })\n    } else {\n      // Normal async with callback\n\n      // If not using promise (so using callback),\n      // remove callback function from args and\n      // put it in it's own variable. This allows\n      // sync check to be used (DRY)\n      var callback = args[callback_index];\n      delete args[callback_index];\n      args = processParamsArguments(args);\n      args[3] = callback;\n      scryptNative.params(args[0], args[1], args[2],  Os.totalmem(), args[3]);\n    }\n  },\n\n  kdfSync: function() {\n    var args = processKDFArguments(arguments);\n    return scryptNative.kdfSync(args[0], args[1], Crypto.randomBytes(256));\n  },\n\n  kdf: function() {\n    var args = arguments\n      , callback_index = checkAsyncArguments(args, 2, \"At least two arguments are needed before the call back function - the key and the Scrypt parameters object\")\n      , that = this;\n\n    args = processKDFArguments(args);\n\n    if (callback_index === undefined) { // promise\n      return new Promise(function(resolve, reject) {\n\n        // Get some async salt\n        Crypto.randomBytes(256, function(err, salt) {\n          if (err) reject(err);\n          else {\n            scryptNative.kdf(args[0], args[1], salt, function(err, kdfResult) {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(kdfResult);\n              }\n            });\n          }\n        });\n      });\n    } else { // Normal async with callback\n      Crypto.randomBytes(256, function(err, salt) {\n        // Normal async with callback\n        if (err) // Crypto.randomBytes err\n          args[2](err); // call callback with error\n        else\n          scryptNative.kdf(args[0], args[1], salt, args[2]);\n      });\n    }\n  },\n\n  verifyKdfSync: function() {\n    var args = processVerifyArguments(arguments);\n    return scryptNative.verifySync(args[0], args[1]);\n  },\n\n  verifyKdf: function() {\n    var args = arguments\n      , callback_index = checkAsyncArguments(args, 2, \"At least two arguments are needed before the callback function - the KDF and the key\");\n\n    if (callback_index === undefined) {\n      // Promise\n      return new Promise(function(resolve, reject) {\n        args = processVerifyArguments(args);\n        scryptNative.verify(args[0], args[1], function(err, match) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(match);\n          }\n        });\n      })\n    } else {\n      // Normal async with callback\n      args = processVerifyArguments(args);\n      scryptNative.verify(args[0], args[1], args[2]);\n    }\n  },\n\n  hashSync: function() {\n    var args = processHashArguments(arguments);\n    return scryptNative.hashSync(args[0], args[1], args[2], args[3]);\n  },\n\n  hash: function() {\n    var args = arguments\n      , callback_index = checkAsyncArguments(args, 4, \"At least four arguments are needed before the callback - the key to hash, the scrypt params object, the output length of the hash and the salt\");\n\n    args = processHashArguments(args);\n\n    if (callback_index === undefined) {\n      //Promise\n      return new Promise(function(resolve, reject) {\n        scryptNative.hash(args[0], args[1], args[2], args[3], function(err, hash) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(hash);\n          }\n        });\n      });\n    } else {\n      // Normal async with callback\n      scryptNative.hash(args[0], args[1], args[2], args[3], args[4]);\n    }\n  }\n};\n\nmodule.exports = scrypt;\n","/home/travis/build/npmtest/node-npmtest-scrypt/node_modules/scrypt/node-scrypt-preinstall.js":"\"use strict\";\n\nvar OS = require(\"os\")\n  , path = require('path').dirname(require.main.filename)\n  , exec = require('child_process').exec\n  , puts = function(error, stdout, stderr) { if (error) console.log(\"Error: \" + error);};\n\n// Regenerate config if not a windows platform\n// if windows, use the default config.h\nif (OS.platform() !== \"win32\") {\n  exec(\"make clean\", {\"cwd\": path + \"/scrypt/scrypt-1.2.0\"});\n  exec(\"./configure\", {cwd: path + \"/scrypt/scrypt-1.2.0\"}, puts);\n}\n"}